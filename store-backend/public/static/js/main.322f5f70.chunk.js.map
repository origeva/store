{"version":3,"sources":["components/home/index.js","components/coffee/index.js","components/products/index.js","api.js","components/login/index.js","App.js","reportWebVitals.js","index.js"],"names":["Home","CoffeeArticle","coffee","name","image","strength","price","src","alt","width","CoffeePage","a","fetch","response","json","list","console","log","useState","coffees","setCoffees","useEffect","getCoffees","then","fetchedList","map","id","Products","baseURL","postOptions","method","headers","API","register","username","password","body","JSON","stringify","login","has","logout","Login","setUsername","setPassword","type","onChange","e","target","value","onClick","Header","to","Main","path","exact","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.322f5f70.chunk.js","sourcesContent":["const Home = () => {\r\n\treturn <p>home component</p>;\r\n};\r\n\r\nexport default Home;\r\n","import { useEffect, useState } from 'react';\r\n\r\nconst CoffeePage = () => {\r\n\tasync function getCoffees() {\r\n\t\tconst response = await fetch('http://localhost:3000/coffee');\r\n\t\tconst list = await response.json();\r\n\t\tconsole.log(list);\r\n\t\treturn list;\r\n\t}\r\n\r\n\tconst [coffees, setCoffees] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tgetCoffees().then((fetchedList) => setCoffees(fetchedList));\r\n\t}, []);\r\n\treturn (\r\n\t\t<section>\r\n\t\t\t{coffees ? (\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{coffees.map((coffee) => (\r\n\t\t\t\t\t\t<CoffeeArticle key={coffee.id} coffee={coffee} />\r\n\t\t\t\t\t))}\r\n\t\t\t\t</ul>\r\n\t\t\t) : (\r\n\t\t\t\t`We're out of coffee! :'(`\r\n\t\t\t)}\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nconst CoffeeArticle = ({ coffee }) => {\r\n\tconst { name, image, strength, price } = coffee;\r\n\treturn (\r\n\t\t<li>\r\n\t\t\t<article>\r\n\t\t\t\t<div>{name}</div>\r\n\t\t\t\t<img src={image} alt={`${name} coffee`} width='100' />\r\n\t\t\t\t<div>{strength}</div>\r\n\t\t\t\t<div>{price}</div>\r\n\t\t\t</article>\r\n\t\t</li>\r\n\t);\r\n};\r\n\r\nexport default CoffeePage;\r\n","const Products = () => {\r\n\treturn <p>products component</p>;\r\n};\r\n\r\nexport default Products;\r\n","import ReactCookie from 'react-cookie';\r\n\r\nconst baseURL = 'http://localhost';\r\n\r\n// ReactCookie.\r\n\r\nconst postOptions = {\r\n\tmethod: 'POST',\r\n\theaders: { 'Content-Type': 'application/json' },\r\n\t// credentials: 'include',\r\n};\r\n\r\nconst register = async (username, password) => {\r\n\treturn await fetch(`${baseURL}/auth/resgister`, {\r\n\t\t...postOptions,\r\n\t\tbody: JSON.stringify({ username, password }),\r\n\t});\r\n};\r\n\r\nconst login = async (username, password) => {\r\n\tvar response = await fetch(`${baseURL}/auth/login`, {\r\n\t\t...postOptions,\r\n\t\tbody: JSON.stringify({ username, password }),\r\n\t});\r\n\tconsole.log(response.headers.has('Set-Cookie'));\r\n};\r\n\r\nconst logout = async () => {\r\n\treturn await fetch(`${baseURL}/auth/logout`, postOptions);\r\n};\r\n\r\nconst API = { baseURL, register, login, logout };\r\n\r\nexport default API;\r\n","import { useState, useEffect } from 'react';\r\nimport API from '../../api';\r\n\r\nconst Login = () => {\r\n\tconst [username, setUsername] = useState('');\r\n\tconst [password, setPassword] = useState('');\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log();\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<label>Username</label>\r\n\t\t\t<input\r\n\t\t\t\tid='username'\r\n\t\t\t\ttype='text'\r\n\t\t\t\tonChange={(e) => setUsername(e.target.value)}\r\n\t\t\t/>\r\n\t\t\t<label>Password</label>\r\n\t\t\t<input\r\n\t\t\t\tid='password'\r\n\t\t\t\ttype='password'\r\n\t\t\t\tonChange={(e) => setPassword(e.target.value)}\r\n\t\t\t/>\r\n\t\t\t<button onClick={() => API.login(username, password)}>Login</button>\r\n\t\t\t{/* <button>Login</button> */}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Login;\r\n","import './App.css';\nimport { Link, Route } from 'react-router-dom';\nimport Home from './components/home';\nimport Coffee from './components/coffee';\nimport Products from './components/products';\nimport Login from './components/login';\n\nfunction App() {\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Header />\n\t\t\t<Main />\n\t\t</div>\n\t);\n}\n\nconst Header = () => {\n\treturn (\n\t\t<header>\n\t\t\t<Link to='/'>\n\t\t\t\t<img src='logo.png' alt='Java Roast logo' width='200' />\n\t\t\t</Link>\n\t\t\t<Link to='/coffee'>Coffee</Link>\n\t\t\t<Link to='/products'>Products</Link>\n\t\t\t<br />\n\t\t\t<Link to='/login'>Login</Link>\n\t\t</header>\n\t);\n};\n\nconst Main = () => {\n\treturn (\n\t\t<main>\n\t\t\t<Route path='/' exact>\n\t\t\t\t<Home />\n\t\t\t</Route>\n\t\t\t<Route path='/products'>\n\t\t\t\t<Products />\n\t\t\t</Route>\n\t\t\t<Route path='/coffee'>\n\t\t\t\t<Coffee />\n\t\t\t</Route>\n\t\t\t<Route path='/login'>\n\t\t\t\t<Login />\n\t\t\t</Route>\n\t\t</main>\n\t);\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Router>\n\t\t\t<App />\n\t\t</Router>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}